//
//  Contact+CoreDataClass.swift
//  nbc-contacts
//
//  Created by MaxBook on 12/12/24.
//
//

import Foundation
import CoreData

@objc(Contact)
public class Contact: TimeStamp {
    /// CREATE - ÏÉàÎ°úÏö¥ Contact ÏÉùÏÑ±
    /// - Parameters:
    ///   - context: NSManagedObjectContext (ÌïÑÏàò)
    ///   - name: String - Ïù¥Î¶Ñ
    ///   - mobile: String - Ï†ÑÌôîÎ≤àÌò∏
    ///   - pokemon: coreDataÏóê Ï†ÄÏû•Îêú Pokemon Í∞ùÏ≤¥
    /// - Returns: ÏÉùÏÑ±Îêú Contact Í∞ùÏ≤¥
    public static func insert(in context: NSManagedObjectContext, name: String, mobile: String, pokemon: Pokemon) -> Contact? {
        let newContact = Contact(context: context)
        
        newContact.name = name
        newContact.mobile = phone
        newContact.pokemon = pokemon
        newContact.createdAt = Date()
        newContact.updatedAt = Date()
        newContact.deletedAt = nil
        
        do {
            try context.save()
            print("ÏÉùÏÑ± ÏôÑÎ£å: \(name)")
            return newContact
        } catch {
            print("Contact Error: \(error.localizedDescription)")
            return nil
        }
    }
    
    /// üî• READ - Î™®Îì† Contact Ï°∞Ìöå
    /// - Parameter context: NSManagedObjectContext
    /// - Returns: Î™®Îì† Contact Î™©Î°ù
    public static func fetchAll(in context: NSManagedObjectContext) -> [Contact] {
        let request: NSFetchRequest<Contact> = Contact.fetchRequest()
        
        do {
            let contacts = try context.fetch(request)
            print("‚úÖ Ï¥ù \(contacts.count)Í∞úÏùò ContactÎ•º Î∂àÎü¨ÏôîÏäµÎãàÎã§.")
            return contacts
        } catch {
            print("‚ùå READ ÏóêÎü¨: \(error.localizedDescription)")
            return []
        }
    }
    
    /// üî• READ - ÌäπÏ†ï Ï°∞Í±¥Ïùò Contact Ï°∞Ìöå
    /// - Parameters:
    ///   - context: NSManagedObjectContext
    ///   - predicate: NSPredicate - Ï°∞Í±¥
    /// - Returns: Ï°∞Í±¥Ïóê ÎßûÎäî Contact Î™©Î°ù
    public static func fetchWithPredicate(in context: NSManagedObjectContext, predicate: NSPredicate) -> [Contact] {
        let request: NSFetchRequest<Contact> = Contact.fetchRequest()
        request.predicate = predicate
        
        do {
            let contacts = try context.fetch(request)
            print("‚úÖ Ï°∞Í±¥Ïóê ÎßûÎäî \(contacts.count)Í∞úÏùò ContactÎ•º Î∂àÎü¨ÏôîÏäµÎãàÎã§.")
            return contacts
        } catch {
            print("‚ùå READ ÏóêÎü¨: \(error.localizedDescription)")
            return []
        }
    }
    
    /// üî• UPDATE - Contact Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
    /// - Parameters:
    ///   - context: NSManagedObjectContext
    ///   - name: String - ÏÉàÎ°úÏö¥ Ïù¥Î¶Ñ
    ///   - phone: String - ÏÉàÎ°úÏö¥ Ï†ÑÌôîÎ≤àÌò∏
    ///   - email: String - ÏÉàÎ°úÏö¥ Ïù¥Î©îÏùº
    /// - Returns: ÏÑ±Í≥µ Ïó¨Î∂Ä (true/false)
    public func update(in context: NSManagedObjectContext, name: String, phone: String, email: String) -> Bool {
        self.name = name
        self.mobile = phone
        self.email = email
        self.updatedAt = Date()
        
        do {
            try context.save()
            print("‚úÖ UPDATE ÏÑ±Í≥µ: \(name)")
            return true
        } catch {
            print("‚ùå UPDATE ÏóêÎü¨: \(error.localizedDescription)")
            return false
        }
    }
    
    /// üî• DELETE - Contact ÏÇ≠Ï†ú
    /// - Parameter context: NSManagedObjectContext
    /// - Returns: ÏÑ±Í≥µ Ïó¨Î∂Ä (true/false)
    public func delete(in context: NSManagedObjectContext) -> Bool {
        context.delete(self)
        
        do {
            try context.save()
            print("‚úÖ DELETE ÏÑ±Í≥µ")
            return true
        } catch {
            print("‚ùå DELETE ÏóêÎü¨: \(error.localizedDescription)")
            return false
        }
    }
}
